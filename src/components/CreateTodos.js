import React from "react";
import ReactDOM from "react-dom/client";
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap/dist/js/bootstrap.min.js";
import axios from "axios";
import ListTodos from "./ListTodos";

class CreateTodos extends React.Component {
  constructor(props) {
    super(props);
    this.handleReturn = this.handleReturn.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleChangeInp = this.handleChangeInp.bind(this);
    this.state = {
      userId: 0,
      title: "",
      completed: false,
    };
  }

  handleReturn() {
    const app = ReactDOM.createRoot(document.getElementById("App"));
    app.render(
      <React.StrictMode>
        <ListTodos />
      </React.StrictMode>
    );
  }

  handleSubmit(e) {
    e.preventDefault();
    // Comprobation of parameters
    if (
      this.state.userId > 0 &&
      this.state.title.trim().length > 0 &&
      this.state.completed !== "Open"
    ) {
      // Calling POST request to API
      axios
        .post("https://jsonplaceholder.typicode.com/todos", {
          userId: this.state.userId,
          title: this.state.title,
          completed: this.state.completed,
        })
        .then((res) => {
          // On Success, alert with posted info with new ID generated by API
          console.log(res.data);
          alert(
            `It was posted correctly!\n\nUser ID: ${res.data.userId} | Title: ${res.data.title} | Completed: ${res.data.completed} | ID: ${res.data.id}`
          );
        })
        .catch((reason) => {
          alert(reason);
        });
    } else {
      alert("Inputs are not correct.");
    }
  }

  handleChangeInp(e) {
    // Here, we will have a switch statement to change between inputs and know if it are correct or not with if's conditions
    switch (e.target.id) {
      case "userId":
        if (e.target.value > 0) {
          e.target.classList.remove("is-invalid");
          e.target.classList.add("is-valid");
          this.setState({
            userId: e.target.value,
          });
        } else {
          e.target.classList.remove("is-valid");
          e.target.classList.add("is-invalid");
        }
        break;
      case "title":
        if (e.target.value.trim().length > 0 && e.target.value.length < 200) {
          e.target.classList.remove("is-invalid");
          e.target.classList.add("is-valid");
          this.setState({
            title: e.target.value,
          });
        } else {
          e.target.classList.remove("is-valid");
          e.target.classList.add("is-invalid");
        }
        break;
      case "completed":
        if (e.target.value !== "Open") {
          e.target.classList.remove("is-invalid");
          e.target.classList.add("is-valid");
          this.setState({
            completed: e.target.value,
          });
        } else {
          e.target.classList.remove("is-valid");
          e.target.classList.add("is-invalid");
        }
        break;

      default:
        break;
    }
  }

  render() {
    return (
      <div className="container">
        <div className="row">
          <button
            type="button"
            className="btn btn-info btn-lg"
            onClick={this.handleReturn}
          >
            Return to main page
          </button>
        </div>
        <hr />
        <div className="row mb-3">
          <h2>Create TODO's</h2>
        </div>
        <div className="row">
          <form onSubmit={this.handleSubmit}>
            <div className="row">
              <div className="col-4">
                <div className="form-floating mb-3">
                  <input
                    type="number"
                    className="form-control"
                    id="userId"
                    name="userId"
                    onChange={this.handleChangeInp}
                    placeholder="Put User ID here"
                  />
                  <label htmlFor="floatingInput">User ID</label>
                </div>
              </div>
              <div className="col-4">
                <div className="form-floating mb-3">
                  <input
                    type="text"
                    className="form-control"
                    id="title"
                    name="title"
                    onChange={this.handleChangeInp}
                    placeholder="Put title here"
                  />
                  <label htmlFor="floatingInput">Title</label>
                </div>
              </div>
              <div className="col-4">
                <div className="form-floating">
                  <select
                    className="form-select"
                    id="completed"
                    name="completed"
                    aria-label="Completed"
                    onChange={this.handleChangeInp}
                    defaultValue="Open"
                  >
                    <option value="Open">Open this select menu</option>
                    <option value="true">Completed</option>
                    <option value="false">Not Completed</option>
                  </select>
                  <label htmlFor="floatingSelect">Completed</label>
                </div>
              </div>
              <div className="row">
                <div className="d-grid gap-2">
                  <button className="btn btn-success btn-lg" type="submit">
                    Create TODO
                  </button>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    );
  }
}

export default CreateTodos;
